using System;
using System.IO;
using CryptoSQLite;
using UIKit;

namespace CryptoSQLiteSample.iOS
{
    [CryptoTable("MyTasks")]
    public class Tasks
    {
        [PrimaryKey, AutoIncremental]
        public int Id { get; set; }

        [Encrypted]
        public string Description { get; set; }

        public bool IsDone { get; set; }
    }

    public partial class ViewController : UIViewController
    {
        private string fileName = "MySqlDb.db3";
        public ViewController(IntPtr handle) : base(handle)
        {
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            // ! IMPORTANT ! This function determines how to talk to a specific instance of the native SQLite3 library.
            // You can call this function in AppDelegate::FinishedLaunching() function or in AppDelegate ctor.
            SQLitePCL.Batteries_V2.Init(); // From NuGet package SQLitePCLRaw.batteries_green. 

            try
            {
                var documentsPath = Environment.GetFolderPath(Environment.SpecialFolder.Personal); // Documents folder

                var libraryPath = Path.Combine(documentsPath, "..", "Library");                    // Library folder

                var pathToDatabaseFile = Path.Combine(libraryPath, fileName);

                var db = new CryptoSQLiteConnection(pathToDatabaseFile, CryptoAlgoritms.AesWith256BitsKey);

                db.SetEncryptionKey(new byte[32]);

                db.CreateTable<Tasks>();

                db.InsertItem(new Tasks { Description = "Secret task", IsDone = true });

                var item = db.GetItem<Tasks>(1);
            }
            catch (Exception ex)
            {
                var msg = ex.Message;
            }
		}

		public override void DidReceiveMemoryWarning ()
		{
			base.DidReceiveMemoryWarning ();
			// Release any cached data, images, etc that aren't in use.
		}
	}
}

